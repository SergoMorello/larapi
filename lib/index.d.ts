import Core from "./Core";
import type { TUser, TConfig, TMethod, TParams, TResponseData, TListenerEvents, TData } from "./types";
import type { EventListener } from "easy-event-emitter";
import Http from "./Http";
/** Laravel API Client */
declare class API<D extends TResponseData = TResponseData, U extends TUser = TUser, S extends D['success'] = D['success']> extends Core {
    private static instance;
    private _user;
    private token?;
    private csrfToken?;
    constructor(config: TConfig);
    http<DATA extends S[PATH]['?'], PATH extends keyof S = keyof S>(method: TMethod, params: TParams<PATH, DATA>): Http<D, PATH, DATA>;
    get<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA, 'GET'>): Http<D, keyof S, Data>;
    head<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    post<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    put<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    patch<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    delete<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    options<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    connect<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    trace<Data extends S[PATH]['?'], PATH extends keyof S = keyof S, DATA extends S[PATH] = S[PATH]>(params: TParams<PATH, DATA>): Http<D, keyof S, Data>;
    addListener<EVENT extends keyof TListenerEvents, DATA extends TListenerEvents[EVENT]>(event: EVENT, callback: (data: DATA) => void): EventListener;
    setToken(token: string): void;
    setCSRFToken(csrfToken: string): void;
    getToken(): string | undefined;
    getCSRFToken(): string | undefined;
    getUid(): number;
    getUser(): U;
    get uid(): number;
    get user(): U;
    setLogin(user: U, token?: string): void;
    setUser(user: U): void;
    updateUser(user: U): void;
    logout(): Promise<void>;
    static http: <DATA extends TData[PATH]["?"], PATH extends string | number = string | number>(method: TMethod, params: TParams<PATH, DATA>) => Http<TResponseData, PATH, DATA>;
    static get: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA, "GET">) => Http<TResponseData, string | number, Data>;
    static head: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static post: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static put: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static patch: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static delete: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static options: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static connect: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static trace: <Data extends TData[PATH]["?"], PATH extends string | number = string | number, DATA extends TData[PATH] = TData[PATH]>(params: TParams<PATH, DATA>) => Http<TResponseData, string | number, Data>;
    static setConfig: (config: TConfig) => void;
    static setHost: (host: string) => void;
    static setUser: (user: TUser) => void;
    static updateUser: (user: TUser) => void;
    static logout: () => Promise<void>;
    static setToken: (token: string) => void;
    static setLogin: (user: TUser, token?: string) => void;
    static addListener: <EVENT extends keyof TListenerEvents, DATA extends TListenerEvents[EVENT]>(event: EVENT, callback: (data: DATA) => void) => EventListener;
    static setInitData: (data: import("./types").TGroupsData) => void;
    static setCSRFToken: (csrfToken: string) => void;
    static getCSRFToken: () => string | undefined;
    static triggerByCacheGroup: (groups: string | string[]) => void;
    static clearCacheGroup: (groups: string | string[], data?: TData | undefined, fieldKey?: string | null) => void;
    static updateCacheGroup: (groups: string | string[], data: TData, fieldKey?: string | null) => void;
    static getToken: () => string | undefined;
    static getUid: () => number;
    static getUser: () => TUser;
    static user: TUser;
    static uid: number;
    /**
     * @deprecated The method should not be used
     */
    static deleteCacheGroup: (groups: string | string[], data?: TData | undefined, fieldKey?: string | null) => void;
}
export type { EventListener, TResponseData };
export default API;
