import Core from "./Core";
import { EventListener } from "easy-event-emitter";
import type { TMethod, TParams, TData, TListenerEvents, TRequestProgress, TResponseData } from "./types";
declare class Http<D extends TResponseData = TResponseData, PATH = any, DATA extends ((...args: any) => any) = any> extends Core {
    private cacheIndex;
    private currentCache?;
    private currentEvents;
    private requestParams;
    private method;
    private params;
    private path;
    private queue;
    private queueName;
    private _promise?;
    private xhr?;
    constructor(method: TMethod, params: TParams<PATH, DATA>, context?: Core);
    private initRequest;
    private initCache;
    get promise(): Promise<DATA> | undefined;
    private initQueue;
    private setEmit;
    handleSuccess(data: any): void;
    handleAbort(data: any): void;
    handleFail(data: any): void;
    handleError(data: any): void;
    handleComplete(data: any): void;
    handleProgress(progress: TRequestProgress): void;
    private encodeUrlParams;
    private cuteUndifinedParams;
    request(force?: boolean): this;
    abort(): void;
    addHeader(key: string, value: string): this;
    addListener<EVENT extends keyof TListenerEvents, DATA extends TListenerEvents[EVENT]>(event: EVENT, callback: (data: DATA) => void): EventListener;
    deleteHeader(key: string): this;
    updateCache(data: TData, fieldKey?: string | null): void;
    clearCache(data?: TData, fieldKey?: string | null): void;
}
export default Http;
